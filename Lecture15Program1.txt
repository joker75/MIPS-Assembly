# Lecture 15 Program 1
# $t0 stores buffer		$t1 stores display
# $t2 stores counter to reach	$t3 is the pointer 
#  the beginning of string 	 (pointer is moving backwards to beg.)
	.data
buffer: .ascii "2.12<< :tsaceroF** ,0.32<< :tnerruC** MR**&& ;0.25>> :tsaceroF** ,6.94>> :tnerruC** GK**########"
display: .space 80
	
	.text
main: 	la $t0,buffer 		# Load last character address of data block to be reversed
	add $t0,$t0,95 		# (First character address plus 95, as 96 characters always transmitted)
	la $t1,display 		# Load base address of data space for reversed block
	move $t2,$0		# Initialize counter to 0

loop: 	lb $t3,0($t0) 		# Loop begins here; load the next byte
	beq $t3,35,next		# Test and eliminate characters #, &, *, <, and >
	beq $t3,38,next
	beq $t3,42,next
	beq $t3,60,next
	beq $t3,62,next
	sb $t3,0($t1)		# Store valid character in display block
	addi $t1,$t1,1 		# Set display space pointer to next character address

next:	addi $t2,$t2,1 		# Increment counter
	beq $t2,96,print 	# Analysis done yet? If not, increment pointers and continue
	sub $t0,$t0,1 		# Set block pointer to next character address
	j loop 			# Return to loop for next character
				# (Do not store a character here, so do not increment $t1)
print: 	la $a0,display 		# Print reversed block
	li $v0,4
	syscall
	li $v0,10
	syscall 		# Program over